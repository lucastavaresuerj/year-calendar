Description: Create roles for authentication

AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Env:
    Type: String
  S3SavesStackName:
    Type: String
  AuthRoleName:
    Type: String
  UnauthRoleName:
    Type: String
  AllowUnauthenticatedIdentities:
    Type: String
  AutoVerifiedAttributes:
    Type: CommaDelimitedList
  MfaConfiguration:
    Type: String
  MfaTypes:
    Type: CommaDelimitedList
  SmsAuthenticationMessage:
    Type: String
  SmsVerificationMessage:
    Type: String
  EmailVerificationSubject:
    Type: String
  EmailVerificationMessage:
    Type: String
  DefaultPasswordPolicy:
    Type: String
  PasswordPolicyMinLength:
    Type: String
  PasswordPolicyCharacters:
    Type: CommaDelimitedList
  RequiredAttributes:
    Type: CommaDelimitedList
  AliasAttributes:
    Type: CommaDelimitedList
  UserpoolClientGenerateSecret:
    Type: String
  UserpoolClientRefreshTokenValidity:
    Type: String
  UserpoolClientWriteAttributes:
    Type: CommaDelimitedList
  UserpoolClientReadAttributes:
    Type: CommaDelimitedList
  UserpoolClientLambdaRole:
    Type: String
  UserpoolClientSetAttributes:
    Type: String
  ResourceName:
    Type: String
  AuthSelections:
    Type: String
  UseDefault:
    Type: String
  UserPoolGroupList:
    Type: CommaDelimitedList
  ServiceName:
    Type: String
  UsernameCaseSensitive:
    Type: String
  UseEnabledMfas:
    Type: String
  BreakCircularDependency:
    Type: String
  DependsOn:
    Type: CommaDelimitedList

Conditions:
  ShouldNotCreateEnvResources: !Equals
    - !Ref Env
    - NONE
  ShouldOutputAppClientSecrets: !Equals
    - !Ref UserpoolClientGenerateSecret
    - true
Resources:
  AuthRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ""
            Effect: Deny
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: "sts:AssumeRoleWithWebIdentity"
      RoleName: !Sub "${AWS::Region}-${AuthRoleName}"
  UnauthRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ""
            Effect: Deny
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: "sts:AssumeRoleWithWebIdentity"
      RoleName: !Sub "${AWS::Region}-${UnauthRoleName}"

  UserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      AutoVerifiedAttributes:
        - email
      EmailVerificationMessage: !Ref EmailVerificationMessage
      EmailVerificationSubject: !Ref EmailVerificationSubject
      MfaConfiguration: !Ref MfaConfiguration
      Policies:
        PasswordPolicy:
          MinimumLength: !Ref PasswordPolicyMinLength
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      Schema:
        - Mutable: true
          Name: email
          Required: true
      UsernameConfiguration:
        CaseSensitive: false

  UserPoolClientWeb:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: testamde1aa13c_app_clientWeb
      RefreshTokenValidity: !Ref UserpoolClientRefreshTokenValidity
    DependsOn:
      - UserPool

  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: testamde1aa13c_app_client
      GenerateSecret: !Ref UserpoolClientGenerateSecret
      RefreshTokenValidity: !Ref UserpoolClientRefreshTokenValidity
    DependsOn:
      - UserPool

  UserPoolClientRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      RoleName: !If
        - ShouldNotCreateEnvResources
        - !Ref UserpoolClientLambdaRole
        - !Join
          - ""
          - - upClientLambdaRolede1aa13c
            - !Select
              - 3
              - !Split
                - "-"
                - !Ref "AWS::StackName"
            - "-"
            - !Ref Env
    DependsOn:
      - UserPoolClient

  UserPoolClientLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          const response = require('cfn-response');
          const aws = require('aws-sdk');
          const identity = new aws.CognitoIdentityServiceProvider();
          exports.handler = (event, context, callback) => {
            if (event.RequestType == 'Delete') {
              response.send(event, context, response.SUCCESS, {});
            }
            if (event.RequestType == 'Update' || event.RequestType == 'Create') {
              const params = {
                ClientId: event.ResourceProperties.clientId,
                UserPoolId: event.ResourceProperties.userpoolId,
              };
              identity
                .describeUserPoolClient(params)
                .promise()
                .then(res => {
                  response.send(event, context, response.SUCCESS, { appSecret: res.UserPoolClient.ClientSecret });
                })
                .catch(err => {
                  response.send(event, context, response.FAILED, { err });
                });
            }
          };
      Role: !GetAtt
        - UserPoolClientRole
        - Arn
      Handler: index.handler
      Runtime: nodejs12.x
      Timeout: 300
    DependsOn:
      - UserPoolClientRole

  UserPoolClientLambdaPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "cognito-idp:DescribeUserPoolClient"
            Resource: !GetAtt
              - UserPool
              - Arn
      PolicyName: testamde1aa13c_userpoolclient_lambda_iam_policy
      Roles:
        - !Ref UserPoolClientRole
    DependsOn:
      - UserPoolClientLambda

  UserPoolClientLogPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: !Sub
              - >-
                arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
              - region: !Ref "AWS::Region"
                account: !Ref "AWS::AccountId"
                lambda: !Ref UserPoolClientLambda
      PolicyName: testamde1aa13c_userpoolclient_lambda_log_policy
      Roles:
        - !Ref UserPoolClientRole
    DependsOn:
      - UserPoolClientLambdaPolicy

  UserPoolClientInputs:
    Type: "Custom::LambdaCallout"
    Properties:
      ServiceToken: !GetAtt
        - UserPoolClientLambda
        - Arn
      clientId: !Ref UserPoolClient
      userpoolId: !Ref UserPool
    DependsOn:
      - UserPoolClientLogPolicy
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  IdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      AllowUnauthenticatedIdentities: !Ref AllowUnauthenticatedIdentities
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !Sub
            - "cognito-idp.${region}.amazonaws.com/${client}"
            - region: !Ref "AWS::Region"
              client: !Ref UserPool
        - ClientId: !Ref UserPoolClientWeb
          ProviderName: !Sub
            - "cognito-idp.${region}.amazonaws.com/${client}"
            - region: !Ref "AWS::Region"
              client: !Ref UserPool
    DependsOn:
      - UserPoolClientInputs

  IdentityPoolRoleMap:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        unauthenticated: !GetAtt UnauthRole.Arn
        authenticated: !GetAtt AuthRole.Arn
    DependsOn:
      - IdentityPool

  UpdateRolesTemplate:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub
        - "https://s3.amazonaws.com/${Bucket}/cfn-templates/auth/update-roles-template.yaml"
        - Bucket:
            Fn::ImportValue: !Sub "${S3SavesStackName}-BucketName"
      Parameters:
        AuthRoleName: !Ref AuthRole
        UnauthRoleName: !Ref UnauthRole
        AuthRoleArn: !GetAtt AuthRole.Arn
        UnauthRoleArn: !GetAtt UnauthRole.Arn
        IdentityPoolId: !Ref IdentityPool

Outputs:
  IdentityPoolId:
    Description: Id for the identity pool
    Value: !Ref IdentityPool
  UserPoolId:
    Description: Id for the user pool
    Value: !Ref UserPool
  UserPoolArn:
    Description: Arn for the user pool
    Value: !GetAtt UserPool.Arn
  AppClientIDWeb:
    Description: The user pool app client id for web
    Value: !Ref UserPoolClientWeb
  AppClientID:
    Description: The user pool app client id
    Value: !Ref UserPoolClient
  AppClientSecret:
    Value: !GetAtt UserPoolClientInputs.appSecret
    Condition: ShouldOutputAppClientSecrets
  Region:
    Description: Region
    Value: !Ref "AWS::Region"
  AuthRoleName:
    Value: !Ref AuthRole
  UnauthRoleName:
    Value: !Ref UnauthRole
